// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package staking_contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/Evrynetlabs/evrynet-node"
	"github.com/Evrynetlabs/evrynet-node/accounts/abi"
	"github.com/Evrynetlabs/evrynet-node/accounts/abi/bind"
	"github.com/Evrynetlabs/evrynet-node/common"
	"github.com/Evrynetlabs/evrynet-node/core/types"
	"github.com/Evrynetlabs/evrynet-node/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakingContractsABI is the input ABI used to generate the binding from.
const StakingContractsABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"minValidatorStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unvote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxValidatorSize\",\"type\":\"uint256\"}],\"name\":\"updateMaxValidatorSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getListCandidatesWithCurrentData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_candidates\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_stakes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxValSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curEpoch\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"getCandidateData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isActiveCandidate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_latestTotalStakes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxValidatorSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllCandidates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_candidates\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preStake\",\"type\":\"uint256\"}],\"name\":\"encodeStakeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"updateMinVoteCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getListCandidates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_candidates\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_stakes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxValSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curEpoch\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initCandidates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVoterStakeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_preStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastModifiedEpoch\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"candidateData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCandidate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalStakeData\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"resign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"updateMinValidateStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resignedCandidates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minVoterCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_candidates\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"candidatesOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxValidatorSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minValidatorStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minVoteCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockedAmount\",\"type\":\"uint256\"}],\"name\":\"Resigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]"

// StakingContractsBin is the compiled bytecode used for deploying new contracts.
const StakingContractsBin = `608060405260016000553480156200001657600080fd5b50604051620029d0380380620029d083398181016040526101008110156200003d57600080fd5b81019080805160405193929190846401000000008211156200005e57600080fd5b9083019060208201858111156200007457600080fd5b82518660208202830111640100000000821117156200009257600080fd5b82525081516020918201928201910280838360005b83811015620000c1578181015183820152602001620000a7565b505050509190910160409081526020830151908301516060840151608085015160a086015160c087015160e09097015194985092965090949093509091856200010957600080fd5b600786905560088490556009839055600a82905587518410156200012c57600080fd5b8751620001419060029060208b0190620003ec565b5060006200015a8185816001600160e01b03620002bf16565b905060005b8951811015620002775760405180606001604052806001151581526020018381526020018a6001600160a01b0316815250600160008c8481518110620001a157fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505081600160008c84815181106200023557fe5b6020908102919091018101516001600160a01b0390811683528282019390935260409182016000908120938e168152600390930190529020556001016200015f565b5088516200028d9060039060208c0190620003ec565b5050600b80546001600160a01b0319166001600160a01b03929092169190911790555050506006555062000480915050565b6000620002ea60016d4000000000000000000000000000620003a960201b620023151790919060201c565b82169050620003406d40000000000000000000000000006200032a60016d4000000000000000000000000000620003a960201b620023151790919060201c565b8516620003bf60201b620023ac1790919060201c565b17620003a16d40000000000000000000000000006200038d81620003776410000000006001620003a9602090811b6200231517901c565b8816620003bf60201b620023ac1790919060201c565b620003bf60201b620023ac1790919060201c565b179392505050565b600082821115620003b957600080fd5b50900390565b6000828202831580620003db575082848281620003d857fe5b04145b620003e557600080fd5b9392505050565b82805482825590600052602060002090810192821562000444579160200282015b828111156200044457825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200040d565b506200045292915062000456565b5090565b6200047d91905b80821115620004525780546001600160a01b03191681556001016200045d565b90565b61254080620004906000396000f3fe60806040526004361061019c5760003560e01c80636dd7d8ea116100ec578063ae6e43f51161008a578063b97dd9e211610064578063b97dd9e2146106e5578063bf7e94b5146106fa578063f851a4401461072a578063f8ac9dd51461073f5761019c565b8063ae6e43f514610673578063b2c76f10146106a6578063b5b7a184146106d05761019c565b80638bcc76de116100c65780638bcc76de1461054a578063909b4053146105a357806391a9634f146105dc578063aa677354146106385761019c565b80636dd7d8ea146104c757806375829def146104ed5780638106d590146105205761019c565b80632e1a7d4d116101595780633477ee2e116101335780633477ee2e1461042d5780633a1d8c5a1461047357806348cd4cb11461049d578063690ff8a1146104b25761019c565b80632e1a7d4d146103545780632e6997fe1461039257806332d03c51146103f75761019c565b8063017ddd351461019e57806302aa9be2146101c55780630619624f146101fe5780631fd492f6146102285780632a466ac7146102e45780632de7dd5f1461033f575b005b3480156101aa57600080fd5b506101b3610754565b60408051918252519081900360200190f35b3480156101d157600080fd5b5061019c600480360360408110156101e857600080fd5b506001600160a01b03813516906020013561075a565b34801561020a57600080fd5b5061019c6004803603602081101561022157600080fd5b5035610ac6565b34801561023457600080fd5b5061023d610ae2565b604051808060200180602001858152602001848152602001838103835287818151815260200191508051906020019060200280838360005b8381101561028d578181015183820152602001610275565b50505050905001838103825286818151815260200191508051906020019060200280838360005b838110156102cc5781810151838201526020016102b4565b50505050905001965050505050505060405180910390f35b3480156102f057600080fd5b506103176004803603602081101561030757600080fd5b50356001600160a01b0316610e91565b6040805193151584526001600160a01b03909216602084015282820152519081900360600190f35b34801561034b57600080fd5b506101b3610ef5565b34801561036057600080fd5b5061037e6004803603602081101561037757600080fd5b5035610efb565b604080519115158252519081900360200190f35b34801561039e57600080fd5b506103a7611006565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103e35781810151838201526020016103cb565b505050509050019250505060405180910390f35b34801561040357600080fd5b506101b36004803603606081101561041a57600080fd5b5080359060208101359060400135611068565b34801561043957600080fd5b506104576004803603602081101561045057600080fd5b50356110ef565b604080516001600160a01b039092168252519081900360200190f35b34801561047f57600080fd5b5061019c6004803603602081101561049657600080fd5b5035611116565b3480156104a957600080fd5b506101b3611132565b3480156104be57600080fd5b5061023d611138565b61019c600480360360208110156104dd57600080fd5b50356001600160a01b0316611715565b3480156104f957600080fd5b5061019c6004803603602081101561051057600080fd5b50356001600160a01b0316611912565b34801561052c57600080fd5b506104576004803603602081101561054357600080fd5b503561195e565b34801561055657600080fd5b506105856004803603604081101561056d57600080fd5b506001600160a01b038135811691602001351661196b565b60408051938452602084019290925282820152519081900360600190f35b3480156105af57600080fd5b506101b3600480360360408110156105c657600080fd5b506001600160a01b0381351690602001356119c6565b3480156105e857600080fd5b5061060f600480360360208110156105ff57600080fd5b50356001600160a01b03166119e3565b60408051931515845260208401929092526001600160a01b031682820152519081900360600190f35b34801561064457600080fd5b5061019c6004803603604081101561065b57600080fd5b506001600160a01b0381358116916020013516611a12565b34801561067f57600080fd5b5061019c6004803603602081101561069657600080fd5b50356001600160a01b0316611cc2565b3480156106b257600080fd5b5061019c600480360360208110156106c957600080fd5b50356121e5565b3480156106dc57600080fd5b506101b3612201565b3480156106f157600080fd5b506101b3612207565b34801561070657600080fd5b506104576004803603604081101561071d57600080fd5b5080359060200135612236565b34801561073657600080fd5b5061045761226b565b34801561074b57600080fd5b506101b361227a565b60095481565b6000805460010190819055816107b7576040805162461bcd60e51b815260206004820181905260248201527f776974686472617720616d6f756e74206d75737420626520706f736974697665604482015290519081900360640190fd5b60006107c1612207565b9050336107cc612433565b6001600160a01b03808716600090815260016020908152604080832093861683526003909301905220546107ff90612280565b9050848160200151101561085a576040805162461bcd60e51b815260206004820152601a60248201527f616d6f756e7420746f6f2062696720746f207769746864726177000000000000604482015290519081900360640190fd5b6020810151600090610872908763ffffffff61231516565b6001600160a01b03808916600090815260016020526040902060020154919250848116911614156108e3576009548110156108de5760405162461bcd60e51b81526004018080602001828103825260218152602001806124b36021913960400191505060405180910390fd5b61092d565b8015806108f25750600a548110155b61092d5760405162461bcd60e51b81526004018080602001828103825260388152602001806124d46038913960400191505060405180910390fd5b83826040015114156109455760208201819052610958565b6020820180518352819052604082018490525b6109618261232a565b6001600160a01b0380891660009081526001602090815260408083209388168352600390930190522055610993612433565b6001600160a01b038816600090815260016020819052604090912001546109b990612280565b905084816040015114156109e65760208101516109dc908863ffffffff61231516565b6020820152610a0b565b60208101518082526109fe908863ffffffff61231516565b6020820152604081018590525b610a148161232a565b6001600160a01b03808a1660009081526001602081905260408083209091019390935591519086169189156108fc02918a91818181858888f19350505050158015610a63573d6000803e3d6000fd5b50604080516001600160a01b0380871682528a16602082015280820189905290517f7958395da8e26969cc7c09ee58e9507a2601574c3bd232617e2d6354224ff8369181900360600190a150505050506000548114610ac157600080fd5b505050565b600b546001600160a01b03163314610add57600080fd5b600855565b60085460609081906000610af4612207565b905080610be557600354604080518281526020808402820101909152908015610b27578160200160208202803883390190505b506003546040805182815260208084028201019091529195508015610b56578160200160208202803883390190505b50925060005b600354811015610bdf5760038181548110610b7357fe5b9060005260206000200160009054906101000a90046001600160a01b0316858281518110610b9d57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600954848281518110610bcc57fe5b6020908102919091010152600101610b5c565b50610e8b565b610bed612433565b600080805b600254811015610cb1576001600060028381548110610c0d57fe5b60009182526020808320909101546001600160a01b0390811684529083019390935260409091018120600290810154815493169550610c9392600192919085908110610c5557fe5b60009182526020808320909101546001600160a01b039081168452838201949094526040928301822093881682526003909301909252902054612280565b9350600954846020015110610ca9576001909101905b600101610bf2565b5080604051908082528060200260200182016040528015610cdc578160200160208202803883390190505b50965080604051908082528060200260200182016040528015610d09578160200160208202803883390190505b5095506000805b600254811015610e85576001600060028381548110610d2b57fe5b60009182526020808320909101546001600160a01b0390811684529083019390935260409091018120600290810154815493169650610db192600192919085908110610d7357fe5b60009182526020808320909101546001600160a01b039081168452838201949094526040928301822093891682526003909301909252902054612280565b9450600954856020015110610e7d5760028181548110610dcd57fe5b9060005260206000200160009054906101000a90046001600160a01b0316898381518110610df757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050610e586001600060028481548110610e2b57fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902060010154612280565b94508460200151888381518110610e6b57fe5b60209081029190910101526001909101905b600101610d10565b50505050505b90919293565b6001600160a01b038082166000908152600160205260408120805460029091015460ff909116921690610ec2612433565b6001600160a01b03851660009081526001602081905260409091200154610ee890612280565b6020015193959294505050565b60085481565b6000805460010180825581610f0e612207565b905083811015610f4f5760405162461bcd60e51b81526004018080602001828103825260218152602001806124926021913960400191505060405180910390fd5b3360008181526005602090815260408083208884529091528120805491905580610fb4576040805162461bcd60e51b81526020600482015260116024820152700776974686472617720636170206973203607c1b604482015290519081900360640190fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610fea573d6000803e3d6000fd5b5060019450505050600054811461100057600080fd5b50919050565b6060600280548060200260200160405190810160405280929190818152602001828054801561105e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611040575b5050505050905090565b600061107f6001606e1b600163ffffffff61231516565b821690506110aa6001606e1b61109c81600163ffffffff61231516565b85169063ffffffff6123ac16565b176110e76001606e1b6110db816110cd641000000000600163ffffffff61231516565b88169063ffffffff6123ac16565b9063ffffffff6123ac16565b179392505050565b600281815481106110fc57fe5b6000918252602090912001546001600160a01b0316905081565b600b546001600160a01b0316331461112d57600080fd5b600a55565b60065481565b6008546060908190600061114a612207565b9050806112355760035460408051828152602080840282010190915290801561117d578160200160208202803883390190505b5060035460408051828152602080840282010190915291955080156111ac578160200160208202803883390190505b50925060005b600354811015610bdf57600381815481106111c957fe5b9060005260206000200160009054906101000a90046001600160a01b03168582815181106111f357fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060095484828151811061122257fe5b60209081029190910101526001016111b2565b6000198101611242612433565b60008080805b6002548110156112e157600160006002838154811061126357fe5b60009182526020808320909101546001600160a01b03908116845290830193909352604090910181206002908101548154931696506112ab92600192919085908110610d7357fe5b9450858560400151116112c457846020015192506112c9565b845192505b60095483106112d9576001909101905b600101611248565b5060008681526004602090815260409182902080548351818402810184019094528084526060939283018282801561134257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611324575b50939450600093505050505b815181101561140c57600160006002838154811061136857fe5b60009182526020808320909101546001600160a01b03908116845290830193909352604090910181206002908101548154931697506113ee926001929190859081106113b057fe5b60009182526020808320909101546001600160a01b0390811684528382019490945260409283018220938a1682526003909301909252902054612280565b9550600954866000015110611404576001909201915b60010161134e565b5081604051908082528060200260200182016040528015611437578160200160208202803883390190505b50995081604051908082528060200260200182016040528015611464578160200160208202803883390190505b5098506000805b6002548110156115fa57600160006002838154811061148657fe5b60009182526020808320909101546001600160a01b039081168452908301939093526040909101812060029081015481549316985061150c926001929190859081106114ce57fe5b60009182526020808320909101546001600160a01b0390811684528382019490945260409283018220938b1682526003909301909252902054612280565b965087876040015111611525578660200151945061152a565b865194505b60095485106115f2576002818154811061154057fe5b9060005260206000200160009054906101000a90046001600160a01b03168c838151811061156a57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061159e6001600060028481548110610e2b57fe5b9650878760400151116115cd5786602001518b83815181106115bc57fe5b6020026020010181815250506115eb565b86600001518b83815181106115de57fe5b6020026020010181815250505b6001909101905b60010161146b565b5060005b825181101561170757600160006002838154811061161857fe5b60009182526020808320909101546001600160a01b0390811684529083019390935260409091018120600290810154815493169850611660926001929190859081106114ce57fe5b96506009548760000151106116ff576002818154811061167c57fe5b9060005260206000200160009054906101000a90046001600160a01b03168c83815181106116a657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506116da6001600060028481548110610e2b57fe5b965086600001518b83815181106116ed57fe5b60209081029190910101526001909101905b6001016115fe565b505050505050505090919293565b600a5434101561172457600080fd5b6001600160a01b038116600090815260016020819052604090912054829160ff90911615151461175357600080fd5b3433600061175f612207565b9050611769612433565b6001600160a01b0386166000908152600160208190526040909120015461178f90612280565b905081816040015114156117bc5760208101516117b2908563ffffffff6123d616565b60208201526117e1565b60208101518082526117d4908563ffffffff6123d616565b6020820152604081018290525b6117ea8161232a565b6001600160a01b0387166000908152600160208190526040909120015561180f612433565b6001600160a01b038088166000908152600160209081526040808320938816835260039093019052205461184290612280565b9050828160400151141561186f576020810151611865908663ffffffff6123d616565b6020820152611894565b6020810151808252611887908663ffffffff6123d616565b6020820152604081018390525b61189d8161232a565b6001600160a01b038089166000818152600160209081526040808320948a1680845260039095018252918290209490945580519283529282015280820187905290517f174ba19ba3c8bb5c679c87e51db79fff7c3f04bb84c1fd55b7dacb470b674aa69181900360600190a150505050505050565b600b546001600160a01b0316331461192957600080fd5b6001600160a01b03811661193c57600080fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600381815481106110fc57fe5b6000806000611978612433565b6001600160a01b03808716600090815260016020908152604080832093891683526003909301905220546119ab90612280565b80516020820151604090920151909891975095509350505050565b600560209081526000928352604080842090915290825290205481565b600160208190526000918252604090912080549181015460029091015460ff909216916001600160a01b031683565b600b546001600160a01b03163314611a2957600080fd5b6001600160a01b038216600090815260016020526040902054829060ff1615611a5157600080fd5b6001600160a01b038316611aac576040805162461bcd60e51b815260206004820152601d60248201527f5f63616e6469646174652061646472657373206973206d697373696e67000000604482015290519081900360640190fd5b6001600160a01b038216611b07576040805162461bcd60e51b815260206004820152601960248201527f5f6f776e65722061646472657373206973206d697373696e6700000000000000604482015290519081900360640190fd5b611b0f612433565b6001600160a01b03841660009081526001602081905260409091200154611b3590612280565b90508060200151600014611b80576040805162461bcd60e51b815260206004820152600d60248201526c616c7220686164207374616b6560981b604482015290519081900360640190fd5b600254608011611bcd576040805162461bcd60e51b8152602060048201526013602482015272746f6f206d616e792063616e6469646174657360681b604482015290519081900360640190fd5b6040518060600160405280600115158152602001611bee6000806000611068565b81526001600160a01b0380861660209283018190528782166000818152600180865260408083208851815490151560ff1990911617815588880151818401559781015160029889018054919097166001600160a01b03199182161790965587549182018855969091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054909316811790925583519182529181019190915281517f0a31ee9d46a828884b81003c8498156ea6aa15b9b54bdd0ef0b533d9eba57e55929181900390910190a150505050565b6000805460019081018083556001600160a01b03841683526020829052604090922054839160ff909116151514611cf857600080fd5b6001600160a01b038381166000908152600160205260409020600201543391168114611d2357600080fd5b6000611d2d612207565b905080611e255760005b600354811015611e2357856001600160a01b031660038281548110611d5857fe5b6000918252602090912001546001600160a01b03161415611e1b57600360016002805490500381548110611d8857fe5b600091825260209091200154600380546001600160a01b039092169183908110611dae57fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600380546000198101908110611de957fe5b600091825260209091200180546001600160a01b03191690556003805490611e15906000198301612454565b50611e23565b600101611d37565b505b6000818152600460209081526040822080546001810182559083529082200180546001600160a01b0319166001600160a01b0388161790555b600254811015611f4757856001600160a01b031660028281548110611e7f57fe5b6000918252602090912001546001600160a01b03161415611f3f57600280546000198101908110611eac57fe5b600091825260209091200154600280546001600160a01b039092169183908110611ed257fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600280546000198101908110611f0d57fe5b600091825260209091200180546001600160a01b03191690556002805490611f39906000198301612454565b50611f47565b600101611e5e565b506001600160a01b0385166000908152600160205260409020805460ff19169055611f70612433565b6001600160a01b0380871660009081526001602090815260408083209387168352600390930190522054611fa390612280565b90508181604001511015611fb957602081015181525b6020810151600954600090611fd590839063ffffffff6123e816565b90506000611fe9838363ffffffff61231516565b60006020860152604085018690529050612001612433565b6001600160a01b038a166000908152600160208190526040909120015461202790612280565b9050858160400151141561205457602081015161204a908563ffffffff61231516565b6020820152612079565b602081015180825261206c908563ffffffff61231516565b6020820152604081018690525b6120828161232a565b6001600160a01b038b16600090815260016020819052604090912001556120a88561232a565b6001600160a01b03808c166000908152600160209081526040808320938c16835260039093019052908120919091556120e887600263ffffffff6123d616565b6001600160a01b038916600090815260056020908152604080832084845290915290205490915061211f908563ffffffff6123d616565b6001600160a01b03891660009081526005602090815260408083208584529091529020558215612181576040516001600160a01b0389169084156108fc029085906000818181858888f1935050505015801561217f573d6000803e3d6000fd5b505b604080516001600160a01b038d1681526020810185905280820186905290517f08c94c357c2917419b7101b8c01d5bc36399aec80a94c46369088b9e73bac1599181900360600190a150505050505050505060005481146121e157600080fd5b5050565b600b546001600160a01b031633146121fc57600080fd5b600955565b60075481565b60006122306007546122246006544361231590919063ffffffff16565b9063ffffffff6123fe16565b90505b90565b6004602052816000526040600020818154811061224f57fe5b6000918252602090912001546001600160a01b03169150829050565b600b546001600160a01b031681565b600a5481565b612288612433565b61229d6001606e1b600163ffffffff61231516565b821681526122b66001606e1b600163ffffffff61231516565b6122ca836001606e1b63ffffffff6123fe16565b1660208201526122e6641000000000600163ffffffff61231516565b61230a6122fd6001606e1b8063ffffffff6123ac16565b849063ffffffff6123fe16565b166040820152919050565b60008282111561232457600080fd5b50900390565b60006123416001606e1b600163ffffffff61231516565b82511690506123716001606e1b61235f81600163ffffffff61231516565b6020850151169063ffffffff6123ac16565b176123a66001606e1b6110db81612394641000000000600163ffffffff61231516565b6040870151169063ffffffff6123ac16565b17919050565b60008282028315806123c65750828482816123c357fe5b04145b6123cf57600080fd5b9392505050565b6000828201838110156123cf57600080fd5b60008183106123f757816123cf565b5090919050565b600080821161240c57600080fd5b600082848161241757fe5b04905082848161242357fe5b068184020184146123cf57600080fd5b60405180606001604052806000815260200160008152602001600081525090565b815481835581811115610ac157600083815260209020610ac191810190830161223391905b8082111561248d5760008155600101612479565b509056fe63616e206e6f7420776974686472617720666f72206675747572652065706f636872656d61696e20616d6f756e74206f66206f776e657220697320746f6f206c6f7772656d61696e20616d6f756e74206d757374206265206569746865722030206f72206174206c65617374206d696e20766f74657220636170a265627a7a72315820a6278bc2a5cc9ac7c530b1c435bc5a47a081338e0b50cc595b0be145b242435764736f6c634300050b0032`

// DeployStakingContracts deploys a new Evrynet contract, binding an instance of StakingContracts to it.
func DeployStakingContracts(auth *bind.TransactOpts, backend bind.ContractBackend, _candidates []common.Address, candidatesOwner common.Address, _epochPeriod *big.Int, _startBlock *big.Int, _maxValidatorSize *big.Int, _minValidatorStake *big.Int, _minVoteCap *big.Int, _admin common.Address) (common.Address, *types.Transaction, *StakingContracts, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingContractsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StakingContractsBin), backend, _candidates, candidatesOwner, _epochPeriod, _startBlock, _maxValidatorSize, _minValidatorStake, _minVoteCap, _admin)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakingContracts{StakingContractsCaller: StakingContractsCaller{contract: contract}, StakingContractsTransactor: StakingContractsTransactor{contract: contract}, StakingContractsFilterer: StakingContractsFilterer{contract: contract}}, nil
}

// StakingContracts is an auto generated Go binding around an Evrynet contract.
type StakingContracts struct {
	StakingContractsCaller     // Read-only binding to the contract
	StakingContractsTransactor // Write-only binding to the contract
	StakingContractsFilterer   // Log filterer for contract events
}

// StakingContractsCaller is an auto generated read-only Go binding around an Evrynet contract.
type StakingContractsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingContractsTransactor is an auto generated write-only Go binding around an Evrynet contract.
type StakingContractsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingContractsFilterer is an auto generated log filtering Go binding around an Evrynet contract events.
type StakingContractsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingContractsSession is an auto generated Go binding around an Evrynet contract,
// with pre-set call and transact options.
type StakingContractsSession struct {
	Contract     *StakingContracts // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingContractsCallerSession is an auto generated read-only Go binding around an Evrynet contract,
// with pre-set call options.
type StakingContractsCallerSession struct {
	Contract *StakingContractsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// StakingContractsTransactorSession is an auto generated write-only Go binding around an Evrynet contract,
// with pre-set transact options.
type StakingContractsTransactorSession struct {
	Contract     *StakingContractsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// StakingContractsRaw is an auto generated low-level Go binding around an Evrynet contract.
type StakingContractsRaw struct {
	Contract *StakingContracts // Generic contract binding to access the raw methods on
}

// StakingContractsCallerRaw is an auto generated low-level read-only Go binding around an Evrynet contract.
type StakingContractsCallerRaw struct {
	Contract *StakingContractsCaller // Generic read-only contract binding to access the raw methods on
}

// StakingContractsTransactorRaw is an auto generated low-level write-only Go binding around an Evrynet contract.
type StakingContractsTransactorRaw struct {
	Contract *StakingContractsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingContracts creates a new instance of StakingContracts, bound to a specific deployed contract.
func NewStakingContracts(address common.Address, backend bind.ContractBackend) (*StakingContracts, error) {
	contract, err := bindStakingContracts(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingContracts{StakingContractsCaller: StakingContractsCaller{contract: contract}, StakingContractsTransactor: StakingContractsTransactor{contract: contract}, StakingContractsFilterer: StakingContractsFilterer{contract: contract}}, nil
}

// NewStakingContractsCaller creates a new read-only instance of StakingContracts, bound to a specific deployed contract.
func NewStakingContractsCaller(address common.Address, caller bind.ContractCaller) (*StakingContractsCaller, error) {
	contract, err := bindStakingContracts(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingContractsCaller{contract: contract}, nil
}

// NewStakingContractsTransactor creates a new write-only instance of StakingContracts, bound to a specific deployed contract.
func NewStakingContractsTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingContractsTransactor, error) {
	contract, err := bindStakingContracts(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingContractsTransactor{contract: contract}, nil
}

// NewStakingContractsFilterer creates a new log filterer instance of StakingContracts, bound to a specific deployed contract.
func NewStakingContractsFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingContractsFilterer, error) {
	contract, err := bindStakingContracts(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingContractsFilterer{contract: contract}, nil
}

// bindStakingContracts binds a generic wrapper to an already deployed contract.
func bindStakingContracts(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingContractsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingContracts *StakingContractsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _StakingContracts.Contract.StakingContractsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingContracts *StakingContractsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingContracts.Contract.StakingContractsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingContracts *StakingContractsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingContracts.Contract.StakingContractsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingContracts *StakingContractsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _StakingContracts.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingContracts *StakingContractsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingContracts.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingContracts *StakingContractsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingContracts.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_StakingContracts *StakingContractsCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_StakingContracts *StakingContractsSession) Admin() (common.Address, error) {
	return _StakingContracts.Contract.Admin(&_StakingContracts.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_StakingContracts *StakingContractsCallerSession) Admin() (common.Address, error) {
	return _StakingContracts.Contract.Admin(&_StakingContracts.CallOpts)
}

// CandidateData is a free data retrieval call binding the contract method 0x91a9634f.
//
// Solidity: function candidateData(address ) constant returns(bool isCandidate, uint256 totalStakeData, address owner)
func (_StakingContracts *StakingContractsCaller) CandidateData(opts *bind.CallOpts, arg0 common.Address) (struct {
	IsCandidate    bool
	TotalStakeData *big.Int
	Owner          common.Address
}, error) {
	ret := new(struct {
		IsCandidate    bool
		TotalStakeData *big.Int
		Owner          common.Address
	})
	out := ret
	err := _StakingContracts.contract.Call(opts, out, "candidateData", arg0)
	return *ret, err
}

// CandidateData is a free data retrieval call binding the contract method 0x91a9634f.
//
// Solidity: function candidateData(address ) constant returns(bool isCandidate, uint256 totalStakeData, address owner)
func (_StakingContracts *StakingContractsSession) CandidateData(arg0 common.Address) (struct {
	IsCandidate    bool
	TotalStakeData *big.Int
	Owner          common.Address
}, error) {
	return _StakingContracts.Contract.CandidateData(&_StakingContracts.CallOpts, arg0)
}

// CandidateData is a free data retrieval call binding the contract method 0x91a9634f.
//
// Solidity: function candidateData(address ) constant returns(bool isCandidate, uint256 totalStakeData, address owner)
func (_StakingContracts *StakingContractsCallerSession) CandidateData(arg0 common.Address) (struct {
	IsCandidate    bool
	TotalStakeData *big.Int
	Owner          common.Address
}, error) {
	return _StakingContracts.Contract.CandidateData(&_StakingContracts.CallOpts, arg0)
}

// Candidates is a free data retrieval call binding the contract method 0x3477ee2e.
//
// Solidity: function candidates(uint256 ) constant returns(address)
func (_StakingContracts *StakingContractsCaller) Candidates(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "candidates", arg0)
	return *ret0, err
}

// Candidates is a free data retrieval call binding the contract method 0x3477ee2e.
//
// Solidity: function candidates(uint256 ) constant returns(address)
func (_StakingContracts *StakingContractsSession) Candidates(arg0 *big.Int) (common.Address, error) {
	return _StakingContracts.Contract.Candidates(&_StakingContracts.CallOpts, arg0)
}

// Candidates is a free data retrieval call binding the contract method 0x3477ee2e.
//
// Solidity: function candidates(uint256 ) constant returns(address)
func (_StakingContracts *StakingContractsCallerSession) Candidates(arg0 *big.Int) (common.Address, error) {
	return _StakingContracts.Contract.Candidates(&_StakingContracts.CallOpts, arg0)
}

// EncodeStakeData is a free data retrieval call binding the contract method 0x32d03c51.
//
// Solidity: function encodeStakeData(uint256 epoch, uint256 curStake, uint256 preStake) constant returns(uint256 data)
func (_StakingContracts *StakingContractsCaller) EncodeStakeData(opts *bind.CallOpts, epoch *big.Int, curStake *big.Int, preStake *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "encodeStakeData", epoch, curStake, preStake)
	return *ret0, err
}

// EncodeStakeData is a free data retrieval call binding the contract method 0x32d03c51.
//
// Solidity: function encodeStakeData(uint256 epoch, uint256 curStake, uint256 preStake) constant returns(uint256 data)
func (_StakingContracts *StakingContractsSession) EncodeStakeData(epoch *big.Int, curStake *big.Int, preStake *big.Int) (*big.Int, error) {
	return _StakingContracts.Contract.EncodeStakeData(&_StakingContracts.CallOpts, epoch, curStake, preStake)
}

// EncodeStakeData is a free data retrieval call binding the contract method 0x32d03c51.
//
// Solidity: function encodeStakeData(uint256 epoch, uint256 curStake, uint256 preStake) constant returns(uint256 data)
func (_StakingContracts *StakingContractsCallerSession) EncodeStakeData(epoch *big.Int, curStake *big.Int, preStake *big.Int) (*big.Int, error) {
	return _StakingContracts.Contract.EncodeStakeData(&_StakingContracts.CallOpts, epoch, curStake, preStake)
}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() constant returns(uint256)
func (_StakingContracts *StakingContractsCaller) EpochPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "epochPeriod")
	return *ret0, err
}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() constant returns(uint256)
func (_StakingContracts *StakingContractsSession) EpochPeriod() (*big.Int, error) {
	return _StakingContracts.Contract.EpochPeriod(&_StakingContracts.CallOpts)
}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() constant returns(uint256)
func (_StakingContracts *StakingContractsCallerSession) EpochPeriod() (*big.Int, error) {
	return _StakingContracts.Contract.EpochPeriod(&_StakingContracts.CallOpts)
}

// GetAllCandidates is a free data retrieval call binding the contract method 0x2e6997fe.
//
// Solidity: function getAllCandidates() constant returns(address[] _candidates)
func (_StakingContracts *StakingContractsCaller) GetAllCandidates(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "getAllCandidates")
	return *ret0, err
}

// GetAllCandidates is a free data retrieval call binding the contract method 0x2e6997fe.
//
// Solidity: function getAllCandidates() constant returns(address[] _candidates)
func (_StakingContracts *StakingContractsSession) GetAllCandidates() ([]common.Address, error) {
	return _StakingContracts.Contract.GetAllCandidates(&_StakingContracts.CallOpts)
}

// GetAllCandidates is a free data retrieval call binding the contract method 0x2e6997fe.
//
// Solidity: function getAllCandidates() constant returns(address[] _candidates)
func (_StakingContracts *StakingContractsCallerSession) GetAllCandidates() ([]common.Address, error) {
	return _StakingContracts.Contract.GetAllCandidates(&_StakingContracts.CallOpts)
}

// GetCandidateData is a free data retrieval call binding the contract method 0x2a466ac7.
//
// Solidity: function getCandidateData(address _candidate) constant returns(bool _isActiveCandidate, address _owner, uint256 _latestTotalStakes)
func (_StakingContracts *StakingContractsCaller) GetCandidateData(opts *bind.CallOpts, _candidate common.Address) (struct {
	IsActiveCandidate bool
	Owner             common.Address
	LatestTotalStakes *big.Int
}, error) {
	ret := new(struct {
		IsActiveCandidate bool
		Owner             common.Address
		LatestTotalStakes *big.Int
	})
	out := ret
	err := _StakingContracts.contract.Call(opts, out, "getCandidateData", _candidate)
	return *ret, err
}

// GetCandidateData is a free data retrieval call binding the contract method 0x2a466ac7.
//
// Solidity: function getCandidateData(address _candidate) constant returns(bool _isActiveCandidate, address _owner, uint256 _latestTotalStakes)
func (_StakingContracts *StakingContractsSession) GetCandidateData(_candidate common.Address) (struct {
	IsActiveCandidate bool
	Owner             common.Address
	LatestTotalStakes *big.Int
}, error) {
	return _StakingContracts.Contract.GetCandidateData(&_StakingContracts.CallOpts, _candidate)
}

// GetCandidateData is a free data retrieval call binding the contract method 0x2a466ac7.
//
// Solidity: function getCandidateData(address _candidate) constant returns(bool _isActiveCandidate, address _owner, uint256 _latestTotalStakes)
func (_StakingContracts *StakingContractsCallerSession) GetCandidateData(_candidate common.Address) (struct {
	IsActiveCandidate bool
	Owner             common.Address
	LatestTotalStakes *big.Int
}, error) {
	return _StakingContracts.Contract.GetCandidateData(&_StakingContracts.CallOpts, _candidate)
}

// GetCurrentEpoch is a free data retrieval call binding the contract method 0xb97dd9e2.
//
// Solidity: function getCurrentEpoch() constant returns(uint256)
func (_StakingContracts *StakingContractsCaller) GetCurrentEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "getCurrentEpoch")
	return *ret0, err
}

// GetCurrentEpoch is a free data retrieval call binding the contract method 0xb97dd9e2.
//
// Solidity: function getCurrentEpoch() constant returns(uint256)
func (_StakingContracts *StakingContractsSession) GetCurrentEpoch() (*big.Int, error) {
	return _StakingContracts.Contract.GetCurrentEpoch(&_StakingContracts.CallOpts)
}

// GetCurrentEpoch is a free data retrieval call binding the contract method 0xb97dd9e2.
//
// Solidity: function getCurrentEpoch() constant returns(uint256)
func (_StakingContracts *StakingContractsCallerSession) GetCurrentEpoch() (*big.Int, error) {
	return _StakingContracts.Contract.GetCurrentEpoch(&_StakingContracts.CallOpts)
}

// GetListCandidates is a free data retrieval call binding the contract method 0x690ff8a1.
//
// Solidity: function getListCandidates() constant returns(address[] _candidates, uint256[] _stakes, uint256 _maxValSize, uint256 _curEpoch)
func (_StakingContracts *StakingContractsCaller) GetListCandidates(opts *bind.CallOpts) (struct {
	Candidates []common.Address
	Stakes     []*big.Int
	MaxValSize *big.Int
	CurEpoch   *big.Int
}, error) {
	ret := new(struct {
		Candidates []common.Address
		Stakes     []*big.Int
		MaxValSize *big.Int
		CurEpoch   *big.Int
	})
	out := ret
	err := _StakingContracts.contract.Call(opts, out, "getListCandidates")
	return *ret, err
}

// GetListCandidates is a free data retrieval call binding the contract method 0x690ff8a1.
//
// Solidity: function getListCandidates() constant returns(address[] _candidates, uint256[] _stakes, uint256 _maxValSize, uint256 _curEpoch)
func (_StakingContracts *StakingContractsSession) GetListCandidates() (struct {
	Candidates []common.Address
	Stakes     []*big.Int
	MaxValSize *big.Int
	CurEpoch   *big.Int
}, error) {
	return _StakingContracts.Contract.GetListCandidates(&_StakingContracts.CallOpts)
}

// GetListCandidates is a free data retrieval call binding the contract method 0x690ff8a1.
//
// Solidity: function getListCandidates() constant returns(address[] _candidates, uint256[] _stakes, uint256 _maxValSize, uint256 _curEpoch)
func (_StakingContracts *StakingContractsCallerSession) GetListCandidates() (struct {
	Candidates []common.Address
	Stakes     []*big.Int
	MaxValSize *big.Int
	CurEpoch   *big.Int
}, error) {
	return _StakingContracts.Contract.GetListCandidates(&_StakingContracts.CallOpts)
}

// GetListCandidatesWithCurrentData is a free data retrieval call binding the contract method 0x1fd492f6.
//
// Solidity: function getListCandidatesWithCurrentData() constant returns(address[] _candidates, uint256[] _stakes, uint256 _maxValSize, uint256 _curEpoch)
func (_StakingContracts *StakingContractsCaller) GetListCandidatesWithCurrentData(opts *bind.CallOpts) (struct {
	Candidates []common.Address
	Stakes     []*big.Int
	MaxValSize *big.Int
	CurEpoch   *big.Int
}, error) {
	ret := new(struct {
		Candidates []common.Address
		Stakes     []*big.Int
		MaxValSize *big.Int
		CurEpoch   *big.Int
	})
	out := ret
	err := _StakingContracts.contract.Call(opts, out, "getListCandidatesWithCurrentData")
	return *ret, err
}

// GetListCandidatesWithCurrentData is a free data retrieval call binding the contract method 0x1fd492f6.
//
// Solidity: function getListCandidatesWithCurrentData() constant returns(address[] _candidates, uint256[] _stakes, uint256 _maxValSize, uint256 _curEpoch)
func (_StakingContracts *StakingContractsSession) GetListCandidatesWithCurrentData() (struct {
	Candidates []common.Address
	Stakes     []*big.Int
	MaxValSize *big.Int
	CurEpoch   *big.Int
}, error) {
	return _StakingContracts.Contract.GetListCandidatesWithCurrentData(&_StakingContracts.CallOpts)
}

// GetListCandidatesWithCurrentData is a free data retrieval call binding the contract method 0x1fd492f6.
//
// Solidity: function getListCandidatesWithCurrentData() constant returns(address[] _candidates, uint256[] _stakes, uint256 _maxValSize, uint256 _curEpoch)
func (_StakingContracts *StakingContractsCallerSession) GetListCandidatesWithCurrentData() (struct {
	Candidates []common.Address
	Stakes     []*big.Int
	MaxValSize *big.Int
	CurEpoch   *big.Int
}, error) {
	return _StakingContracts.Contract.GetListCandidatesWithCurrentData(&_StakingContracts.CallOpts)
}

// GetVoterStakeData is a free data retrieval call binding the contract method 0x8bcc76de.
//
// Solidity: function getVoterStakeData(address _candidate, address _voter) constant returns(uint256 _preStake, uint256 _curStake, uint256 _lastModifiedEpoch)
func (_StakingContracts *StakingContractsCaller) GetVoterStakeData(opts *bind.CallOpts, _candidate common.Address, _voter common.Address) (struct {
	PreStake          *big.Int
	CurStake          *big.Int
	LastModifiedEpoch *big.Int
}, error) {
	ret := new(struct {
		PreStake          *big.Int
		CurStake          *big.Int
		LastModifiedEpoch *big.Int
	})
	out := ret
	err := _StakingContracts.contract.Call(opts, out, "getVoterStakeData", _candidate, _voter)
	return *ret, err
}

// GetVoterStakeData is a free data retrieval call binding the contract method 0x8bcc76de.
//
// Solidity: function getVoterStakeData(address _candidate, address _voter) constant returns(uint256 _preStake, uint256 _curStake, uint256 _lastModifiedEpoch)
func (_StakingContracts *StakingContractsSession) GetVoterStakeData(_candidate common.Address, _voter common.Address) (struct {
	PreStake          *big.Int
	CurStake          *big.Int
	LastModifiedEpoch *big.Int
}, error) {
	return _StakingContracts.Contract.GetVoterStakeData(&_StakingContracts.CallOpts, _candidate, _voter)
}

// GetVoterStakeData is a free data retrieval call binding the contract method 0x8bcc76de.
//
// Solidity: function getVoterStakeData(address _candidate, address _voter) constant returns(uint256 _preStake, uint256 _curStake, uint256 _lastModifiedEpoch)
func (_StakingContracts *StakingContractsCallerSession) GetVoterStakeData(_candidate common.Address, _voter common.Address) (struct {
	PreStake          *big.Int
	CurStake          *big.Int
	LastModifiedEpoch *big.Int
}, error) {
	return _StakingContracts.Contract.GetVoterStakeData(&_StakingContracts.CallOpts, _candidate, _voter)
}

// InitCandidates is a free data retrieval call binding the contract method 0x8106d590.
//
// Solidity: function initCandidates(uint256 ) constant returns(address)
func (_StakingContracts *StakingContractsCaller) InitCandidates(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "initCandidates", arg0)
	return *ret0, err
}

// InitCandidates is a free data retrieval call binding the contract method 0x8106d590.
//
// Solidity: function initCandidates(uint256 ) constant returns(address)
func (_StakingContracts *StakingContractsSession) InitCandidates(arg0 *big.Int) (common.Address, error) {
	return _StakingContracts.Contract.InitCandidates(&_StakingContracts.CallOpts, arg0)
}

// InitCandidates is a free data retrieval call binding the contract method 0x8106d590.
//
// Solidity: function initCandidates(uint256 ) constant returns(address)
func (_StakingContracts *StakingContractsCallerSession) InitCandidates(arg0 *big.Int) (common.Address, error) {
	return _StakingContracts.Contract.InitCandidates(&_StakingContracts.CallOpts, arg0)
}

// MaxValidatorSize is a free data retrieval call binding the contract method 0x2de7dd5f.
//
// Solidity: function maxValidatorSize() constant returns(uint256)
func (_StakingContracts *StakingContractsCaller) MaxValidatorSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "maxValidatorSize")
	return *ret0, err
}

// MaxValidatorSize is a free data retrieval call binding the contract method 0x2de7dd5f.
//
// Solidity: function maxValidatorSize() constant returns(uint256)
func (_StakingContracts *StakingContractsSession) MaxValidatorSize() (*big.Int, error) {
	return _StakingContracts.Contract.MaxValidatorSize(&_StakingContracts.CallOpts)
}

// MaxValidatorSize is a free data retrieval call binding the contract method 0x2de7dd5f.
//
// Solidity: function maxValidatorSize() constant returns(uint256)
func (_StakingContracts *StakingContractsCallerSession) MaxValidatorSize() (*big.Int, error) {
	return _StakingContracts.Contract.MaxValidatorSize(&_StakingContracts.CallOpts)
}

// MinValidatorStake is a free data retrieval call binding the contract method 0x017ddd35.
//
// Solidity: function minValidatorStake() constant returns(uint256)
func (_StakingContracts *StakingContractsCaller) MinValidatorStake(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "minValidatorStake")
	return *ret0, err
}

// MinValidatorStake is a free data retrieval call binding the contract method 0x017ddd35.
//
// Solidity: function minValidatorStake() constant returns(uint256)
func (_StakingContracts *StakingContractsSession) MinValidatorStake() (*big.Int, error) {
	return _StakingContracts.Contract.MinValidatorStake(&_StakingContracts.CallOpts)
}

// MinValidatorStake is a free data retrieval call binding the contract method 0x017ddd35.
//
// Solidity: function minValidatorStake() constant returns(uint256)
func (_StakingContracts *StakingContractsCallerSession) MinValidatorStake() (*big.Int, error) {
	return _StakingContracts.Contract.MinValidatorStake(&_StakingContracts.CallOpts)
}

// MinVoterCap is a free data retrieval call binding the contract method 0xf8ac9dd5.
//
// Solidity: function minVoterCap() constant returns(uint256)
func (_StakingContracts *StakingContractsCaller) MinVoterCap(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "minVoterCap")
	return *ret0, err
}

// MinVoterCap is a free data retrieval call binding the contract method 0xf8ac9dd5.
//
// Solidity: function minVoterCap() constant returns(uint256)
func (_StakingContracts *StakingContractsSession) MinVoterCap() (*big.Int, error) {
	return _StakingContracts.Contract.MinVoterCap(&_StakingContracts.CallOpts)
}

// MinVoterCap is a free data retrieval call binding the contract method 0xf8ac9dd5.
//
// Solidity: function minVoterCap() constant returns(uint256)
func (_StakingContracts *StakingContractsCallerSession) MinVoterCap() (*big.Int, error) {
	return _StakingContracts.Contract.MinVoterCap(&_StakingContracts.CallOpts)
}

// ResignedCandidates is a free data retrieval call binding the contract method 0xbf7e94b5.
//
// Solidity: function resignedCandidates(uint256 , uint256 ) constant returns(address)
func (_StakingContracts *StakingContractsCaller) ResignedCandidates(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "resignedCandidates", arg0, arg1)
	return *ret0, err
}

// ResignedCandidates is a free data retrieval call binding the contract method 0xbf7e94b5.
//
// Solidity: function resignedCandidates(uint256 , uint256 ) constant returns(address)
func (_StakingContracts *StakingContractsSession) ResignedCandidates(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _StakingContracts.Contract.ResignedCandidates(&_StakingContracts.CallOpts, arg0, arg1)
}

// ResignedCandidates is a free data retrieval call binding the contract method 0xbf7e94b5.
//
// Solidity: function resignedCandidates(uint256 , uint256 ) constant returns(address)
func (_StakingContracts *StakingContractsCallerSession) ResignedCandidates(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _StakingContracts.Contract.ResignedCandidates(&_StakingContracts.CallOpts, arg0, arg1)
}

// StartBlock is a free data retrieval call binding the contract method 0x48cd4cb1.
//
// Solidity: function startBlock() constant returns(uint256)
func (_StakingContracts *StakingContractsCaller) StartBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "startBlock")
	return *ret0, err
}

// StartBlock is a free data retrieval call binding the contract method 0x48cd4cb1.
//
// Solidity: function startBlock() constant returns(uint256)
func (_StakingContracts *StakingContractsSession) StartBlock() (*big.Int, error) {
	return _StakingContracts.Contract.StartBlock(&_StakingContracts.CallOpts)
}

// StartBlock is a free data retrieval call binding the contract method 0x48cd4cb1.
//
// Solidity: function startBlock() constant returns(uint256)
func (_StakingContracts *StakingContractsCallerSession) StartBlock() (*big.Int, error) {
	return _StakingContracts.Contract.StartBlock(&_StakingContracts.CallOpts)
}

// WithdrawalCap is a free data retrieval call binding the contract method 0x909b4053.
//
// Solidity: function withdrawalCap(address , uint256 ) constant returns(uint256)
func (_StakingContracts *StakingContractsCaller) WithdrawalCap(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingContracts.contract.Call(opts, out, "withdrawalCap", arg0, arg1)
	return *ret0, err
}

// WithdrawalCap is a free data retrieval call binding the contract method 0x909b4053.
//
// Solidity: function withdrawalCap(address , uint256 ) constant returns(uint256)
func (_StakingContracts *StakingContractsSession) WithdrawalCap(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _StakingContracts.Contract.WithdrawalCap(&_StakingContracts.CallOpts, arg0, arg1)
}

// WithdrawalCap is a free data retrieval call binding the contract method 0x909b4053.
//
// Solidity: function withdrawalCap(address , uint256 ) constant returns(uint256)
func (_StakingContracts *StakingContractsCallerSession) WithdrawalCap(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _StakingContracts.Contract.WithdrawalCap(&_StakingContracts.CallOpts, arg0, arg1)
}

// Register is a paid mutator transaction binding the contract method 0xaa677354.
//
// Solidity: function register(address _candidate, address _owner) returns()
func (_StakingContracts *StakingContractsTransactor) Register(opts *bind.TransactOpts, _candidate common.Address, _owner common.Address) (*types.Transaction, error) {
	return _StakingContracts.contract.Transact(opts, "register", _candidate, _owner)
}

// Register is a paid mutator transaction binding the contract method 0xaa677354.
//
// Solidity: function register(address _candidate, address _owner) returns()
func (_StakingContracts *StakingContractsSession) Register(_candidate common.Address, _owner common.Address) (*types.Transaction, error) {
	return _StakingContracts.Contract.Register(&_StakingContracts.TransactOpts, _candidate, _owner)
}

// Register is a paid mutator transaction binding the contract method 0xaa677354.
//
// Solidity: function register(address _candidate, address _owner) returns()
func (_StakingContracts *StakingContractsTransactorSession) Register(_candidate common.Address, _owner common.Address) (*types.Transaction, error) {
	return _StakingContracts.Contract.Register(&_StakingContracts.TransactOpts, _candidate, _owner)
}

// Resign is a paid mutator transaction binding the contract method 0xae6e43f5.
//
// Solidity: function resign(address _candidate) returns()
func (_StakingContracts *StakingContractsTransactor) Resign(opts *bind.TransactOpts, _candidate common.Address) (*types.Transaction, error) {
	return _StakingContracts.contract.Transact(opts, "resign", _candidate)
}

// Resign is a paid mutator transaction binding the contract method 0xae6e43f5.
//
// Solidity: function resign(address _candidate) returns()
func (_StakingContracts *StakingContractsSession) Resign(_candidate common.Address) (*types.Transaction, error) {
	return _StakingContracts.Contract.Resign(&_StakingContracts.TransactOpts, _candidate)
}

// Resign is a paid mutator transaction binding the contract method 0xae6e43f5.
//
// Solidity: function resign(address _candidate) returns()
func (_StakingContracts *StakingContractsTransactorSession) Resign(_candidate common.Address) (*types.Transaction, error) {
	return _StakingContracts.Contract.Resign(&_StakingContracts.TransactOpts, _candidate)
}

// TransferAdmin is a paid mutator transaction binding the contract method 0x75829def.
//
// Solidity: function transferAdmin(address newAdmin) returns()
func (_StakingContracts *StakingContractsTransactor) TransferAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _StakingContracts.contract.Transact(opts, "transferAdmin", newAdmin)
}

// TransferAdmin is a paid mutator transaction binding the contract method 0x75829def.
//
// Solidity: function transferAdmin(address newAdmin) returns()
func (_StakingContracts *StakingContractsSession) TransferAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _StakingContracts.Contract.TransferAdmin(&_StakingContracts.TransactOpts, newAdmin)
}

// TransferAdmin is a paid mutator transaction binding the contract method 0x75829def.
//
// Solidity: function transferAdmin(address newAdmin) returns()
func (_StakingContracts *StakingContractsTransactorSession) TransferAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _StakingContracts.Contract.TransferAdmin(&_StakingContracts.TransactOpts, newAdmin)
}

// Unvote is a paid mutator transaction binding the contract method 0x02aa9be2.
//
// Solidity: function unvote(address candidate, uint256 amount) returns()
func (_StakingContracts *StakingContractsTransactor) Unvote(opts *bind.TransactOpts, candidate common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingContracts.contract.Transact(opts, "unvote", candidate, amount)
}

// Unvote is a paid mutator transaction binding the contract method 0x02aa9be2.
//
// Solidity: function unvote(address candidate, uint256 amount) returns()
func (_StakingContracts *StakingContractsSession) Unvote(candidate common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingContracts.Contract.Unvote(&_StakingContracts.TransactOpts, candidate, amount)
}

// Unvote is a paid mutator transaction binding the contract method 0x02aa9be2.
//
// Solidity: function unvote(address candidate, uint256 amount) returns()
func (_StakingContracts *StakingContractsTransactorSession) Unvote(candidate common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingContracts.Contract.Unvote(&_StakingContracts.TransactOpts, candidate, amount)
}

// UpdateMaxValidatorSize is a paid mutator transaction binding the contract method 0x0619624f.
//
// Solidity: function updateMaxValidatorSize(uint256 newMaxValidatorSize) returns()
func (_StakingContracts *StakingContractsTransactor) UpdateMaxValidatorSize(opts *bind.TransactOpts, newMaxValidatorSize *big.Int) (*types.Transaction, error) {
	return _StakingContracts.contract.Transact(opts, "updateMaxValidatorSize", newMaxValidatorSize)
}

// UpdateMaxValidatorSize is a paid mutator transaction binding the contract method 0x0619624f.
//
// Solidity: function updateMaxValidatorSize(uint256 newMaxValidatorSize) returns()
func (_StakingContracts *StakingContractsSession) UpdateMaxValidatorSize(newMaxValidatorSize *big.Int) (*types.Transaction, error) {
	return _StakingContracts.Contract.UpdateMaxValidatorSize(&_StakingContracts.TransactOpts, newMaxValidatorSize)
}

// UpdateMaxValidatorSize is a paid mutator transaction binding the contract method 0x0619624f.
//
// Solidity: function updateMaxValidatorSize(uint256 newMaxValidatorSize) returns()
func (_StakingContracts *StakingContractsTransactorSession) UpdateMaxValidatorSize(newMaxValidatorSize *big.Int) (*types.Transaction, error) {
	return _StakingContracts.Contract.UpdateMaxValidatorSize(&_StakingContracts.TransactOpts, newMaxValidatorSize)
}

// UpdateMinValidateStake is a paid mutator transaction binding the contract method 0xb2c76f10.
//
// Solidity: function updateMinValidateStake(uint256 _newCap) returns()
func (_StakingContracts *StakingContractsTransactor) UpdateMinValidateStake(opts *bind.TransactOpts, _newCap *big.Int) (*types.Transaction, error) {
	return _StakingContracts.contract.Transact(opts, "updateMinValidateStake", _newCap)
}

// UpdateMinValidateStake is a paid mutator transaction binding the contract method 0xb2c76f10.
//
// Solidity: function updateMinValidateStake(uint256 _newCap) returns()
func (_StakingContracts *StakingContractsSession) UpdateMinValidateStake(_newCap *big.Int) (*types.Transaction, error) {
	return _StakingContracts.Contract.UpdateMinValidateStake(&_StakingContracts.TransactOpts, _newCap)
}

// UpdateMinValidateStake is a paid mutator transaction binding the contract method 0xb2c76f10.
//
// Solidity: function updateMinValidateStake(uint256 _newCap) returns()
func (_StakingContracts *StakingContractsTransactorSession) UpdateMinValidateStake(_newCap *big.Int) (*types.Transaction, error) {
	return _StakingContracts.Contract.UpdateMinValidateStake(&_StakingContracts.TransactOpts, _newCap)
}

// UpdateMinVoteCap is a paid mutator transaction binding the contract method 0x3a1d8c5a.
//
// Solidity: function updateMinVoteCap(uint256 _newCap) returns()
func (_StakingContracts *StakingContractsTransactor) UpdateMinVoteCap(opts *bind.TransactOpts, _newCap *big.Int) (*types.Transaction, error) {
	return _StakingContracts.contract.Transact(opts, "updateMinVoteCap", _newCap)
}

// UpdateMinVoteCap is a paid mutator transaction binding the contract method 0x3a1d8c5a.
//
// Solidity: function updateMinVoteCap(uint256 _newCap) returns()
func (_StakingContracts *StakingContractsSession) UpdateMinVoteCap(_newCap *big.Int) (*types.Transaction, error) {
	return _StakingContracts.Contract.UpdateMinVoteCap(&_StakingContracts.TransactOpts, _newCap)
}

// UpdateMinVoteCap is a paid mutator transaction binding the contract method 0x3a1d8c5a.
//
// Solidity: function updateMinVoteCap(uint256 _newCap) returns()
func (_StakingContracts *StakingContractsTransactorSession) UpdateMinVoteCap(_newCap *big.Int) (*types.Transaction, error) {
	return _StakingContracts.Contract.UpdateMinVoteCap(&_StakingContracts.TransactOpts, _newCap)
}

// Vote is a paid mutator transaction binding the contract method 0x6dd7d8ea.
//
// Solidity: function vote(address candidate) returns()
func (_StakingContracts *StakingContractsTransactor) Vote(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _StakingContracts.contract.Transact(opts, "vote", candidate)
}

// Vote is a paid mutator transaction binding the contract method 0x6dd7d8ea.
//
// Solidity: function vote(address candidate) returns()
func (_StakingContracts *StakingContractsSession) Vote(candidate common.Address) (*types.Transaction, error) {
	return _StakingContracts.Contract.Vote(&_StakingContracts.TransactOpts, candidate)
}

// Vote is a paid mutator transaction binding the contract method 0x6dd7d8ea.
//
// Solidity: function vote(address candidate) returns()
func (_StakingContracts *StakingContractsTransactorSession) Vote(candidate common.Address) (*types.Transaction, error) {
	return _StakingContracts.Contract.Vote(&_StakingContracts.TransactOpts, candidate)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 epoch) returns(bool)
func (_StakingContracts *StakingContractsTransactor) Withdraw(opts *bind.TransactOpts, epoch *big.Int) (*types.Transaction, error) {
	return _StakingContracts.contract.Transact(opts, "withdraw", epoch)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 epoch) returns(bool)
func (_StakingContracts *StakingContractsSession) Withdraw(epoch *big.Int) (*types.Transaction, error) {
	return _StakingContracts.Contract.Withdraw(&_StakingContracts.TransactOpts, epoch)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 epoch) returns(bool)
func (_StakingContracts *StakingContractsTransactorSession) Withdraw(epoch *big.Int) (*types.Transaction, error) {
	return _StakingContracts.Contract.Withdraw(&_StakingContracts.TransactOpts, epoch)
}

// StakingContractsRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the StakingContracts contract.
type StakingContractsRegisteredIterator struct {
	Event *StakingContractsRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingContractsRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingContractsRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingContractsRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingContractsRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingContractsRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingContractsRegistered represents a Registered event raised by the StakingContracts contract.
type StakingContractsRegistered struct {
	Candidate common.Address
	Owner     common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0x0a31ee9d46a828884b81003c8498156ea6aa15b9b54bdd0ef0b533d9eba57e55.
//
// Solidity: event Registered(address candidate, address owner)
func (_StakingContracts *StakingContractsFilterer) FilterRegistered(opts *bind.FilterOpts) (*StakingContractsRegisteredIterator, error) {

	logs, sub, err := _StakingContracts.contract.FilterLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return &StakingContractsRegisteredIterator{contract: _StakingContracts.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0x0a31ee9d46a828884b81003c8498156ea6aa15b9b54bdd0ef0b533d9eba57e55.
//
// Solidity: event Registered(address candidate, address owner)
func (_StakingContracts *StakingContractsFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *StakingContractsRegistered) (event.Subscription, error) {

	logs, sub, err := _StakingContracts.contract.WatchLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingContractsRegistered)
				if err := _StakingContracts.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingContractsResignedIterator is returned from FilterResigned and is used to iterate over the raw logs and unpacked data for Resigned events raised by the StakingContracts contract.
type StakingContractsResignedIterator struct {
	Event *StakingContractsResigned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingContractsResignedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingContractsResigned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingContractsResigned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingContractsResignedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingContractsResignedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingContractsResigned represents a Resigned event raised by the StakingContracts contract.
type StakingContractsResigned struct {
	Candidate        common.Address
	WithdrawalAmount *big.Int
	LockedAmount     *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterResigned is a free log retrieval operation binding the contract event 0x08c94c357c2917419b7101b8c01d5bc36399aec80a94c46369088b9e73bac159.
//
// Solidity: event Resigned(address _candidate, uint256 _withdrawalAmount, uint256 _lockedAmount)
func (_StakingContracts *StakingContractsFilterer) FilterResigned(opts *bind.FilterOpts) (*StakingContractsResignedIterator, error) {

	logs, sub, err := _StakingContracts.contract.FilterLogs(opts, "Resigned")
	if err != nil {
		return nil, err
	}
	return &StakingContractsResignedIterator{contract: _StakingContracts.contract, event: "Resigned", logs: logs, sub: sub}, nil
}

// WatchResigned is a free log subscription operation binding the contract event 0x08c94c357c2917419b7101b8c01d5bc36399aec80a94c46369088b9e73bac159.
//
// Solidity: event Resigned(address _candidate, uint256 _withdrawalAmount, uint256 _lockedAmount)
func (_StakingContracts *StakingContractsFilterer) WatchResigned(opts *bind.WatchOpts, sink chan<- *StakingContractsResigned) (event.Subscription, error) {

	logs, sub, err := _StakingContracts.contract.WatchLogs(opts, "Resigned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingContractsResigned)
				if err := _StakingContracts.contract.UnpackLog(event, "Resigned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingContractsUnvotedIterator is returned from FilterUnvoted and is used to iterate over the raw logs and unpacked data for Unvoted events raised by the StakingContracts contract.
type StakingContractsUnvotedIterator struct {
	Event *StakingContractsUnvoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingContractsUnvotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingContractsUnvoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingContractsUnvoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingContractsUnvotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingContractsUnvotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingContractsUnvoted represents a Unvoted event raised by the StakingContracts contract.
type StakingContractsUnvoted struct {
	Voter     common.Address
	Candidate common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUnvoted is a free log retrieval operation binding the contract event 0x7958395da8e26969cc7c09ee58e9507a2601574c3bd232617e2d6354224ff836.
//
// Solidity: event Unvoted(address voter, address candidate, uint256 amount)
func (_StakingContracts *StakingContractsFilterer) FilterUnvoted(opts *bind.FilterOpts) (*StakingContractsUnvotedIterator, error) {

	logs, sub, err := _StakingContracts.contract.FilterLogs(opts, "Unvoted")
	if err != nil {
		return nil, err
	}
	return &StakingContractsUnvotedIterator{contract: _StakingContracts.contract, event: "Unvoted", logs: logs, sub: sub}, nil
}

// WatchUnvoted is a free log subscription operation binding the contract event 0x7958395da8e26969cc7c09ee58e9507a2601574c3bd232617e2d6354224ff836.
//
// Solidity: event Unvoted(address voter, address candidate, uint256 amount)
func (_StakingContracts *StakingContractsFilterer) WatchUnvoted(opts *bind.WatchOpts, sink chan<- *StakingContractsUnvoted) (event.Subscription, error) {

	logs, sub, err := _StakingContracts.contract.WatchLogs(opts, "Unvoted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingContractsUnvoted)
				if err := _StakingContracts.contract.UnpackLog(event, "Unvoted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingContractsVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the StakingContracts contract.
type StakingContractsVotedIterator struct {
	Event *StakingContractsVoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingContractsVotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingContractsVoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingContractsVoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingContractsVotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingContractsVotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingContractsVoted represents a Voted event raised by the StakingContracts contract.
type StakingContractsVoted struct {
	Voter     common.Address
	Candidate common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVoted is a free log retrieval operation binding the contract event 0x174ba19ba3c8bb5c679c87e51db79fff7c3f04bb84c1fd55b7dacb470b674aa6.
//
// Solidity: event Voted(address voter, address candidate, uint256 amount)
func (_StakingContracts *StakingContractsFilterer) FilterVoted(opts *bind.FilterOpts) (*StakingContractsVotedIterator, error) {

	logs, sub, err := _StakingContracts.contract.FilterLogs(opts, "Voted")
	if err != nil {
		return nil, err
	}
	return &StakingContractsVotedIterator{contract: _StakingContracts.contract, event: "Voted", logs: logs, sub: sub}, nil
}

// WatchVoted is a free log subscription operation binding the contract event 0x174ba19ba3c8bb5c679c87e51db79fff7c3f04bb84c1fd55b7dacb470b674aa6.
//
// Solidity: event Voted(address voter, address candidate, uint256 amount)
func (_StakingContracts *StakingContractsFilterer) WatchVoted(opts *bind.WatchOpts, sink chan<- *StakingContractsVoted) (event.Subscription, error) {

	logs, sub, err := _StakingContracts.contract.WatchLogs(opts, "Voted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingContractsVoted)
				if err := _StakingContracts.contract.UnpackLog(event, "Voted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingContractsWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the StakingContracts contract.
type StakingContractsWithdrawIterator struct {
	Event *StakingContractsWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingContractsWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingContractsWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingContractsWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingContractsWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingContractsWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingContractsWithdraw represents a Withdraw event raised by the StakingContracts contract.
type StakingContractsWithdraw struct {
	Staker common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address _staker, uint256 _amount)
func (_StakingContracts *StakingContractsFilterer) FilterWithdraw(opts *bind.FilterOpts) (*StakingContractsWithdrawIterator, error) {

	logs, sub, err := _StakingContracts.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &StakingContractsWithdrawIterator{contract: _StakingContracts.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address _staker, uint256 _amount)
func (_StakingContracts *StakingContractsFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *StakingContractsWithdraw) (event.Subscription, error) {

	logs, sub, err := _StakingContracts.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingContractsWithdraw)
				if err := _StakingContracts.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
